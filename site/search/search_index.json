{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Mongorepo is a simple library that allows you to make repositories for MongoDB easier</p>"},{"location":"decorators/","title":"Decorators","text":"<p>For now, <code>mongorepo</code> gives you two decorators for creating repositories: <code>mongo_repository</code> and <code>async_mongo_repository</code>. They have the same functionality, but the second one is asynchonous. The decorators have a lot of functionality. On this page i will show all available</p> <pre><code># You can add or remove fields if want\n@mongo_repository(get_all=False, update_field=True)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n</code></pre> <pre><code>from mongorepo import Access\n\n# You want to make methods private or protected use \"method_access\"\n@mongo_repository(method_access=Access.PRIVATE)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n\nr = Repository()\nr._add(ExampleDTO())\n</code></pre> <pre><code>@dataclass\nclass User:\n    id: str\n    skills: list[str] = field(default_factory=list)    \n\n# If you need ability to update array fields use \"array_fields\"\n# mongo_repository will add couple methods to repository to manipulate arrays\n# skills__append, skills__remove, skills__pop\n@mongo_repository(array_fields=['skills'])\nclass Repository:\n    class Meta:\n        dto = User\n        collection = mongo_client.db.collection\n\n# Usage example\nr = Repository()\nr.add(User(id='1', skills=['a', 'b', 'c']))\nr.skills__append('x', id='1')  # append 'x' to the end of the array\nr.skills__remove('b', id='1')  # remove 'b' from the array\nx = r.skills__pop(id='1')  # variable contains 'x'\n</code></pre> <pre><code>@dataclass\nclass ExampleDTO:\n    id: str\n    workers: int\n    age: int = 2024\n\n# If you want to manipulate with integer fields use \"integer_fields\"\n# this will add two methods for each integer field:\n# {field}_increment and {field}_decrement\n@mongo_repository(integer_fields=['workers', 'age'])\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n\n# Usage example\nr = Repository()\nr.add(ExampleDTO(id='1', workers=13))\nr.increment_workers(id='1')  # this will increment workers by 1, workers=14\nr.decrement_workers(id='1')  # this will decrement workers by 1\nr.increment_workers(id='1', weight=5)  # this will add 5 to workers\n</code></pre>"},{"location":"meta_class/","title":"Meta class","text":"<p>Meta class is crucial if you use mongorepo decorators, Meta class it's required to define  \"dto\" and \"collection\" it gives repository ability to effectively manipulate with data within collection</p> <pre><code># \"dto\" it's simpe class that impements dataclass interface,\n# collection is type of pymongo.Collection\n@dataclass\nclass ExampleDTO:\n\n@mongo_repository(get_all=False, update_field=True)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n</code></pre> <pre><code># You can define index field for a collection in Meta class\n@mongo_repository(get_all=False, update_field=True)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n        index = 'id'\n</code></pre> <pre><code>from mongorepo import Index\n\n# If you want extended Index settings use mongorepo.Index\n@mongo_repository(get_all=False, update_field=True)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n        index = Index(field='id', name='id_index', desc=True, unique=True)\n</code></pre>"},{"location":"quick_start/","title":"Quick start","text":"<p>This tutorial assumes that MongoDB is running on your machine</p> <pre><code>from dataclasses import dataclass\nfrom mongorepo.decorators import mongo_repository\nimport pymongo\n\n\ndef mongo_client_factory(\n    mongo_uri: str = 'mongodb://mongodb:27017/'\n) -&gt; pymongo.MongoClient:\n    client = pymongo.MongoClient(mongo_uri)\n    return client\n\n\n# Define DTO\n@dataclass\nclass UserDTO:\n    username: str = ''\n    password: str = ''\n\n\n# Decorate class with mongo_repository\n@mongo_repository\nclass MongoRepository:\n    class Meta:\n        dto = UserDTO\n        collection = mongo_client_factory()['users_db']['users_collection']\n\n\nrepository = MongoRepository()\n\n# to add users to collection use method \"add\" and pass dto defined in Meta class \nuser_1 = UserDTO(username='admin', password='1234')\nuser_2 = UserDTO(username='bob')\nrepository.add(user_1)\nrepository.add(user_2)\n\n# you can find a user by fields defined in DTO\nuser_1: UserDTO | None = repository.get(username='admin')\n\n# update records with \"update\" method\n# first pass dto with data that you want to change, then search filter\nupdated_user_2: UserDTO | None = repository.update(\n    UserDTO(username='Super Bob'), username='bob',\n)\n\n# you can also delete a user\nis_deleted: bool = repository.delete(username='admin')\n</code></pre> <p>Note</p> <p>in <code>mongo_repository</code> you can exclude and incude specific fields if you want, to do it pass fields that you want to exclude in params, example: <pre><code>@mongo_repository(add=False, update_field=True)\n</code></pre></p>"}]}