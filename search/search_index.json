{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Mongorepo is a simple library that allows you to make repositories for MongoDB easier</p>"},{"location":"decorators/","title":"Decorators","text":"<p>For now, <code>mongorepo</code> gives you two decorators for creating repositories: <code>mongo_repository</code> and <code>async_mongo_repository</code>. They have the same functionality, but the second one is asynchonous. The decorators have a lot of functionality. On this page I will show all available</p>"},{"location":"decorators/#include-and-exclude-fields","title":"Include and exclude fields","text":"<p>to exclude field or include field in repository just pass name of the field with <code>True</code> of <code>False</code> to the params of decorator</p> <pre><code># You can add or remove fields if want\n@mongo_repository(get_all=False, update_field=True)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n</code></pre>"},{"location":"decorators/#access","title":"Access","text":"<p>If you don't want to make generated fields public you can use <code>mongorepo.Access</code> enum it gives decorator required information about how to define fields in the repository. Pass <code>mongorepo.Access</code> value to <code>method_access</code> argument in the parameters</p> <pre><code>from mongorepo import Access\n\n@mongo_repository(method_access=Access.PRIVATE)\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n\nr = Repository()\nr._add(ExampleDTO())\n</code></pre>"},{"location":"decorators/#array-fields","title":"Array fields","text":"<p>If you need ability to update array fields use <code>array_fields</code> parameter. <code>mongo_repository</code> will add couple methods to repository to manipulate arrays. It takes the name of the list field when creates methods</p> <p>methods: <code>{field}__append</code>, <code>{field}__remove</code>, <code>{field}__pop</code></p> <pre><code>@dataclass\nclass User:\n    id: str\n    skills: list[str] = field(default_factory=list)    \n\n@mongo_repository(array_fields=['skills'])\nclass Repository:\n    class Meta:\n        dto = User\n        collection = mongo_client.db.collection\n\n# Usage example\nr = Repository()\nr.add(User(id='1', skills=['a', 'b', 'c']))\nr.skills__append('x', id='1')  # append 'x' to the end of the array\nr.skills__remove('b', id='1')  # remove 'b' from the array\nx = r.skills__pop(id='1')  # variable contains 'x'\n</code></pre>"},{"location":"decorators/#integer-fields","title":"Integer fields","text":"<p>If you want to manipulate with integer fields use <code>integer_fields</code> this will add two methods for each integer field: <code>increment_{field}</code> and <code>decrement_{field}</code> <code>field</code> - is the name of the dto integer field </p> <pre><code>@dataclass\nclass ExampleDTO:\n    id: str\n    workers: int\n    age: int = 2024\n\n@mongo_repository(integer_fields=['workers', 'age'])\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n\n# Usage example\nr = Repository()\nr.add(ExampleDTO(id='1', workers=13))\nr.increment_workers(id='1')  # this will increment workers by 1, workers=14\nr.decrement_workers(id='1')  # this will decrement workers by 1\nr.increment_workers(id='1', weight=5)  # this will add 5 to workers\n</code></pre>"},{"location":"meta_class/","title":"Meta class","text":""},{"location":"meta_class/#meta-class-is-a-class-that-stores-meta-information-about-class","title":"Meta class is a class that stores meta information about class","text":""},{"location":"meta_class/#meta-class-with-mongorepo-decorators","title":"Meta class with mongorepo decorators","text":"<p>Meta class is required if you use <code>mongorepo.decorators</code> or <code>mongorepo.asyncio.decorators</code> it gives repository required knowledge about how and where to store objects defined by user</p>"},{"location":"meta_class/#dto-and-collection","title":"\"dto\" and \"collection\"","text":"<p>In Meta class you need to declare <code>dto</code> and <code>collection</code> 1. dto - data transfer object, it tells repository how to store and add objects to a collection 2. collection - pymongo.collections.Collection, repository will manipulate data in this collection</p> <pre><code># \"dto\" is simpe class that impements dataclass interface,\n@dataclass\nclass ExampleDTO:\n    id: str\n\n@mongo_repository\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n</code></pre>"},{"location":"meta_class/#index-field","title":"Index field","text":"<p>Within Meta class you can define <code>index</code> field for a collection</p> <pre><code>@mongo_repository\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n        index = 'id'\n</code></pre>"},{"location":"meta_class/#extended-settings-for-index","title":"Extended settings for index","text":"<p>If you want extended Index settings use <code>mongorepo.Index</code> <pre><code>from mongorepo import Index\n\n@mongo_repository\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n        index = Index(field='id', name='id_index', desc=True, unique=True)\n</code></pre></p>"},{"location":"meta_class/#id-field","title":"ID field","text":"<p>Use <code>id_field</code> if you want to declare id field for a dto, mongorepo will store generated by MongoDB id there</p> <pre><code>@mongo_repository\nclass Repository:\n    class Meta:\n        dto = ExampleDTO\n        collection = mongo_client.db.collection\n        id_field = 'id'\n</code></pre>"},{"location":"quick_start/","title":"Quick start","text":"<p>This tutorial assumes that MongoDB is running on your machine</p> <pre><code>from dataclasses import dataclass\nfrom mongorepo.decorators import mongo_repository\nimport pymongo\n\n\ndef mongo_client_factory(\n    mongo_uri: str = 'mongodb://mongodb:27017/'\n) -&gt; pymongo.MongoClient:\n    client = pymongo.MongoClient(mongo_uri)\n    return client\n\n\n# Define DTO\n@dataclass\nclass UserDTO:\n    username: str = ''\n    password: str = ''\n\n\n# Decorate class with mongo_repository\n@mongo_repository\nclass MongoRepository:\n    class Meta:\n        dto = UserDTO\n        collection = mongo_client_factory()['users_db']['users_collection']\n\n\nrepository = MongoRepository()\n\n# to add users to collection use method \"add\" and pass dto defined in Meta class \nuser_1 = UserDTO(username='admin', password='1234')\nuser_2 = UserDTO(username='bob')\nrepository.add(user_1)\nrepository.add(user_2)\n\n# you can find a user by fields defined in DTO\nuser_1: UserDTO | None = repository.get(username='admin')\n\n# update records with \"update\" method\n# first pass dto with data that you want to change, then search filter\nupdated_user_2: UserDTO | None = repository.update(\n    UserDTO(username='Super Bob'), username='bob',\n)\n\n# you can also delete a user\nis_deleted: bool = repository.delete(username='admin')\n</code></pre>"}]}